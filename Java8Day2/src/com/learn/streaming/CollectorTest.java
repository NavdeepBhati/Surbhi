package com.learn.streaming;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.IntSummaryStatistics;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentMap;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class CollectorTest {

	/**
	 * 
	 * A simple Java Program to demonstrate how to use collectors to collect the
	 * result of Stream in different collections e.g. List, Set, and Map, and
	 * exploring advanced Collectors options like gropuingBy and partitionBy
	 */

	public static void main(String[] args) {

		List<Integer> numbers = Arrays.asList(10, 20, 30, 11, 20, 33, 4, 44, 55, 20);
		// 1. Collectors.toSet() Example
		Set<Integer> numbersWithoutDups = numbers.stream().collect(Collectors.toSet());
		System.out.println("original list: " + numbers);
		System.out.println("Set generated by Collectors: " + numbersWithoutDups);
		System.out.println();
		
		// 2. Collectors.toList() Example
		List<Integer> numbersWithDups = numbers.stream().collect(Collectors.toList());
		System.out.println("original list: " + numbers);
		System.out.println("List generated by Collectors: " + numbersWithDups);
		System.out.println();
		// 3. Collectors.toCollection() Example
		ArrayList<Integer> anArrayList = numbers.stream().collect(Collectors.toCollection(ArrayList::new));
		System.out.println("original list: " + numbers);
		System.out.println("ArrayList created by Collectors: " + anArrayList);
		System.out.println();
		
		// 4. Collectors.toMap() Example
		Map<Integer, String> intToString = numbersWithoutDups.stream()
				.collect(Collectors.toMap(Function.identity(), String::valueOf));
		System.out.println("original list: " + numbersWithoutDups);
		System.out.println("Map created by Collectors: " + intToString);
		System.out.println();
		
		// 5. Collectors.toConcurrentMap() Example
		ConcurrentMap<Integer, String> concurrentIntToString = numbersWithoutDups.parallelStream()
				.collect(Collectors.toConcurrentMap(Function.identity(), String::valueOf));
		System.out.println("original list: " + numbersWithoutDups);
		System.out.println("ConcurrentMap created by Collectors.toConcurrentMap(): " + concurrentIntToString);
		System.out.println();
		
		// 6. Collectors.joining() Example
		String csv = numbers.stream().map(String::valueOf).collect(Collectors.joining(", "));
		System.out.println("original list: " + numbers);
		System.out.println("Comma separated String created by Collectors.joining() : " + csv);
		System.out.println();
		
		// 7. Collectors.summaryStatistics() Example
		IntSummaryStatistics summary = numbers.stream().collect(Collectors.summarizingInt(Integer::valueOf));
		double average = summary.getAverage();
		int maximum = summary.getMax();
		int minimum = summary.getMin();
		System.out.println("original list: " + numbers);
		System.out.println("Average of all number from list using SummaryStatistics: " + average);
		System.out.println("Maximum of all number from list using SummaryStatistics: " + maximum);
		System.out.println("Minimum of all number from list using SummaryStatistics: " + minimum);
		System.out.println();
		
		// 8. Collectors.groupingBy() Example
		Stream<Locale> streamOfLocales = Stream.of(Locale.getAvailableLocales());
		Map<String, List<Locale>> countryToLocale = streamOfLocales.collect(Collectors.groupingBy(Locale::getCountry));
		System.out.println("original lsit of locales" + streamOfLocales);
		System.out.println("locales group by countries using Collectors.groupingBy: " + countryToLocale);
		System.out.println();
		
		// 9. Collectors.partitionBy() Example
		Map<Boolean, List<Integer>> evenAndOddNumbers = numbers.stream()
				.collect(Collectors.partitioningBy(number -> number % 2 == 0));
		System.out.println("original list: " + numbers);
		System.out.println("list of even nubmers: " + evenAndOddNumbers.get(true));
		System.out.println("list of odd nubmers: " + evenAndOddNumbers.get(false));
		System.out.println();
		
		// 10. Collectors.counting() Example
		long count = numbers.stream().filter(number -> number > 10).collect(Collectors.counting());
		System.out.println("count: " + count);
		System.out.println();
		
	}

}